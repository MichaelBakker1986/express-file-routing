{"version":3,"file":"index.js","sources":["../src/config.ts","../src/utils.ts","../src/lib.ts","../src/router.ts","../src/index.ts"],"sourcesContent":["const config = {\r\n  VALID_FILE_EXTENSIONS: [\".ts\", \".js\", \".mjs\"],\r\n  INVALID_NAME_SUFFIXES: [\".d.ts\"],\r\n  IGNORE_PREFIX_CHAR: \"_\",\r\n  DEFAULT_METHOD_EXPORTS: [\r\n    \"get\",\r\n    \"post\",\r\n    \"put\",\r\n    \"patch\",\r\n    \"delete\",\r\n    \"head\",\r\n    \"connect\",\r\n    \"options\",\r\n    \"trace\"\r\n  ]\r\n}\r\n\r\nexport default config\r\n","import type { ParsedPath } from \"path\"\r\n\r\nimport type { Route } from \"./types\"\r\n\r\nimport config from \"./config\"\r\nimport { Handler } from \"express\"\r\n\r\n/**\r\n * @param parsedFile\r\n *\r\n * @returns Boolean Whether or not the file has to be excluded from route generation\r\n */\r\nexport const isFileIgnored = (parsedFile: ParsedPath) =>\r\n  !config.VALID_FILE_EXTENSIONS.includes(parsedFile.ext.toLowerCase()) ||\r\n  config.INVALID_NAME_SUFFIXES.some(suffix =>\r\n    parsedFile.base.toLowerCase().endsWith(suffix)\r\n  ) ||\r\n  parsedFile.name.startsWith(config.IGNORE_PREFIX_CHAR) ||\r\n  parsedFile.dir.startsWith(`/${config.IGNORE_PREFIX_CHAR}`)\r\n\r\n/**\r\n * @param routes\r\n *\r\n * @returns An array of sorted routes based on their priority\r\n */\r\nexport const prioritizeRoutes = (routes: Route[]) =>\r\n  routes.sort((a, b) => a.priority - b.priority)\r\n\r\n/**\r\n * ```ts\r\n * mergePaths(\"/posts/[id]\", \"index.ts\") -> \"/posts/[id]/index.ts\"\r\n * ```\r\n *\r\n * @param paths An array of mergeable paths\r\n *\r\n * @returns A unification of all paths provided\r\n */\r\nexport const mergePaths = (...paths: string[]) =>\r\n  `/${paths.filter(path => path !== \"\").join(\"/\")}`\r\n\r\nconst regBackets = /\\[([^}]*)\\]/g\r\n\r\nconst transformBrackets = (value: string) =>\r\n  regBackets.test(value) ? value.replace(regBackets, (_, s) => `:${s}`) : value\r\n\r\n/**\r\n * @param path\r\n *\r\n * @returns A new path with all wrapping `[]` replaced by prefixed `:`\r\n */\r\nexport const convertParamSyntax = (path: string) => {\r\n  const subpaths: string[] = []\r\n\r\n  for (const subpath of path.split(\"/\")) {\r\n    subpaths.push(transformBrackets(subpath))\r\n  }\r\n\r\n  return mergePaths(...subpaths)\r\n}\r\n\r\n/**\r\n * ```ts\r\n * convertCatchallSyntax(\"/posts/:...catchall\") -> \"/posts/*\"\r\n * ```\r\n *\r\n * @param url\r\n *\r\n * @returns A new url with all `:...` replaced by `*`\r\n */\r\nexport const convertCatchallSyntax = (url: string) =>\r\n  url.replace(/:\\.\\.\\.\\w+/g, \"*\")\r\n\r\n/**\r\n * @param path\r\n *\r\n * @returns A new path with all wrapping `[]` replaced by prefixed `:` and all `:...` replaced by `*`\r\n */\r\nexport const buildRouteUrl = (path: string) => {\r\n  const url = convertParamSyntax(path)\r\n  return convertCatchallSyntax(url)\r\n}\r\n\r\n/**\r\n * The smaller the number the higher the priority with zero indicating highest priority\r\n *\r\n * @param url\r\n *\r\n * @returns An integer ranging from 0 to Infinity\r\n */\r\nexport const calculatePriority = (url: string) => {\r\n  const depth = url.match(/\\/.+?/g)?.length || 0\r\n  const specifity = url.match(/\\/:.+?/g)?.length || 0\r\n  const catchall = url.match(/\\/\\*/g)?.length > 0 ? Infinity : 0\r\n\r\n  return depth + specifity + catchall\r\n}\r\n\r\nexport const getHandlers = (handler: Handler | Handler[]): Handler[] => {\r\n  if (!Array.isArray(handler)) return [handler]\r\n  return handler\r\n}\r\n\r\nexport const getMethodKey = (method: string) => {\r\n  let methodKey = method.toLowerCase()\r\n\r\n  if (methodKey === \"del\") return \"delete\"\r\n\r\n  return methodKey\r\n}\r\n","import { readdirSync, statSync } from \"fs\"\r\nimport path from \"path\"\r\n\r\nimport type { File, Route } from \"./types\"\r\n\r\nimport {\r\n  buildRouteUrl,\r\n  calculatePriority,\r\n  isFileIgnored,\r\n  mergePaths,\r\n  prioritizeRoutes\r\n} from \"./utils\"\r\n\r\n/**\r\n * @param directory The directory path to walk recursively\r\n * @param tree\r\n *\r\n * @returns An array of all nested files in the specified directory\r\n */\r\nexport const walkTree = (directory: string, tree: string[] = []) => {\r\n  const results: File[] = []\r\n\r\n  for (const fileName of readdirSync(directory)) {\r\n    const filePath = path.join(directory, fileName)\r\n    const fileStats = statSync(filePath)\r\n\r\n    if (fileStats.isDirectory()) {\r\n      results.push(...walkTree(filePath, [...tree, fileName]))\r\n    } else {\r\n      results.push({\r\n        name: fileName,\r\n        path: directory,\r\n        rel: mergePaths(...tree, fileName)\r\n      })\r\n    }\r\n  }\r\n\r\n  return results\r\n}\r\n\r\n/**\r\n * @param files\r\n *\r\n * @returns\r\n */\r\nexport const generateRoutes = async (files: File[]) => {\r\n  const routes: Route[] = []\r\n\r\n  for (const file of files) {\r\n    const parsedFile = path.parse(file.rel)\r\n\r\n    if (isFileIgnored(parsedFile)) continue\r\n\r\n    const directory = parsedFile.dir === parsedFile.root ? \"\" : parsedFile.dir\r\n    const name = parsedFile.name.startsWith(\"index\")\r\n      ? parsedFile.name.replace(\"index\", \"\")\r\n      : `/${parsedFile.name}`\r\n\r\n    const url = buildRouteUrl(directory + name)\r\n    const priority = calculatePriority(url)\r\n    const exports = await import('file://'+path.join(file.path, file.name))\r\n\r\n    routes.push({\r\n      url,\r\n      priority,\r\n      exports\r\n    })\r\n  }\r\n\r\n  return prioritizeRoutes(routes)\r\n}\r\n","import type { Express, Router } from \"express\"\r\nimport path from \"path\"\r\n\r\nimport type { Options } from \"./types\"\r\n\r\nimport config from \"./config\"\r\n\r\nimport { generateRoutes, walkTree } from \"./lib\"\r\nimport { getHandlers, getMethodKey } from \"./utils\"\r\n\r\nconst cjsMainFilename = typeof require !== \"undefined\" && require.main?.filename\r\nconst REQUIRE_MAIN_FILE = path.dirname(cjsMainFilename || process.cwd())\r\n\r\ntype ExpressLike = Express | Router\r\n/**\r\n * Attach routes to an Express app or router instance\r\n *\r\n * ```ts\r\n * createRouter(app)\r\n * ```\r\n *\r\n * @param app An express app or router instance\r\n * @param options An options object (optional)\r\n */\r\nconst createRouter = async <T extends ExpressLike = ExpressLike>(\r\n  app: T,\r\n  options: Options = {}\r\n): Promise<T> => {\r\n  const files = walkTree(\r\n    options.directory || path.join(REQUIRE_MAIN_FILE, \"routes\")\r\n  )\r\n\r\n  const routes = await generateRoutes(files)\r\n\r\n  for (const { url, exports } of routes) {\r\n    const exportedMethods = Object.entries(exports)\r\n\r\n    for (const [method, handler] of exportedMethods) {\r\n      const methodKey = getMethodKey(method)\r\n      const handlers = getHandlers(handler)\r\n\r\n      if (\r\n        !options.additionalMethods?.includes(methodKey) &&\r\n        !config.DEFAULT_METHOD_EXPORTS.includes(methodKey)\r\n      )\r\n        continue\r\n\r\n      app[methodKey](url, ...handlers)\r\n    }\r\n\r\n    // wildcard default export route matching\r\n    if (typeof exports.default !== \"undefined\") {\r\n      const defaultHandlers = getHandlers(exports.default)\r\n      app.all.apply(null, [url, ...defaultHandlers])\r\n    }\r\n  }\r\n\r\n  return app\r\n}\r\n\r\nexport default createRouter\r\n","import { Router } from \"express\"\r\n\r\nimport type { Options } from \"./types\"\r\n\r\nimport createRouter from \"./router\"\r\n\r\nexport default createRouter\r\n\r\nexport { createRouter }\r\n\r\n/**\r\n * Routing middleware\r\n *\r\n * ```ts\r\n * app.use(\"/\", router())\r\n * ```\r\n *\r\n * @param options An options object (optional)\r\n */\r\nexport const router = (options: Options = {}) => {\r\n  return createRouter(Router(), options)\r\n}\r\n\r\nexport { Options }\r\n"],"names":["readdirSync","path","statSync","Router"],"mappings":"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"}